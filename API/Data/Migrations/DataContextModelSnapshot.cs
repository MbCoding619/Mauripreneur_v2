// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("API.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<string>("FName")
                        .HasColumnType("text");

                    b.Property<string>("LName")
                        .HasColumnType("text");

                    b.HasKey("AdminId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppUserRole")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("accountStatus")
                        .HasColumnType("text");

                    b.Property<string>("imagePath")
                        .HasColumnType("text");

                    b.HasKey("AppUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Application", b =>
                {
                    b.Property<int>("StudId")
                        .HasColumnType("integer");

                    b.Property<int>("VacId")
                        .HasColumnType("integer");

                    b.HasKey("StudId", "VacId");

                    b.HasIndex("VacId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("API.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BidAmount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BidDate")
                        .HasColumnType("Date");

                    b.Property<string>("BidResponse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("text");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmeId")
                        .HasColumnType("integer");

                    b.Property<string>("bidNotes")
                        .HasColumnType("text");

                    b.Property<int?>("bidScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("SmeId");

                    b.ToTable("Bid");
                });

            modelBuilder.Entity("API.Entities.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompName")
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<int>("ProfId")
                        .HasColumnType("integer");

                    b.Property<string>("cvPath")
                        .HasColumnType("text");

                    b.Property<string>("yearsExperience")
                        .HasColumnType("text");

                    b.HasKey("ExperienceId");

                    b.HasIndex("ProfId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("API.Entities.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("fieldStatus")
                        .HasColumnType("text");

                    b.HasKey("FieldId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("API.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<int>("SmeId")
                        .HasColumnType("integer");

                    b.Property<string>("Timeframe")
                        .HasColumnType("text");

                    b.Property<string>("filePath")
                        .HasColumnType("text");

                    b.Property<string>("jobStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("SmeId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("API.Entities.Meeting", b =>
                {
                    b.Property<int>("MeetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BidId")
                        .HasColumnType("integer");

                    b.Property<string>("MeetTitle")
                        .HasColumnType("text");

                    b.Property<int?>("ProfId")
                        .HasColumnType("integer");

                    b.Property<int?>("SmeId")
                        .HasColumnType("integer");

                    b.Property<int?>("StudId")
                        .HasColumnType("integer");

                    b.Property<int?>("VacId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("meetingDetails")
                        .HasColumnType("text");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MeetId");

                    b.HasIndex("BidId");

                    b.HasIndex("ProfId");

                    b.HasIndex("SmeId");

                    b.HasIndex("StudId");

                    b.HasIndex("VacId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("API.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("OrgName")
                        .HasColumnType("text");

                    b.Property<string>("OrgRepresent_FName")
                        .HasColumnType("text");

                    b.Property<string>("OrgRepresent_LName")
                        .HasColumnType("text");

                    b.Property<int>("Phone")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("API.Entities.Professional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<string>("BriefDesc")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FName")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<string>("IDNum")
                        .HasColumnType("text");

                    b.Property<string>("LName")
                        .HasColumnType("text");

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("text");

                    b.Property<int>("Phone")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("FieldId");

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("API.Entities.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ProfId")
                        .HasColumnType("integer");

                    b.Property<string>("institution")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<int>("yearEnding")
                        .HasColumnType("integer");

                    b.HasKey("QualificationId");

                    b.HasIndex("ProfId");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("API.Entities.Skills", b =>
                {
                    b.Property<int>("ProfId")
                        .HasColumnType("integer");

                    b.Property<int>("SubFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Proficiency")
                        .HasColumnType("text");

                    b.HasKey("ProfId", "SubFieldId");

                    b.HasIndex("SubFieldId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("API.Entities.Sme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<string>("CompName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("RepresentLName")
                        .HasColumnType("text");

                    b.Property<string>("RepresentName")
                        .HasColumnType("text");

                    b.Property<int>("RepresentPhone")
                        .HasColumnType("integer");

                    b.Property<string>("SocialLink")
                        .HasColumnType("text");

                    b.Property<string>("compDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Sme");
                });

            modelBuilder.Entity("API.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Course")
                        .HasColumnType("text");

                    b.Property<string>("Course_level")
                        .HasColumnType("text");

                    b.Property<string>("FName")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<string>("LName")
                        .HasColumnType("text");

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("text");

                    b.Property<int>("Phone")
                        .HasColumnType("integer");

                    b.Property<string>("Uni")
                        .HasColumnType("text");

                    b.Property<string>("briefDescription")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("FieldId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("API.Entities.SubField", b =>
                {
                    b.Property<int>("SubFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<string>("subFieldStatus")
                        .HasColumnType("text");

                    b.HasKey("SubFieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("SubField");
                });

            modelBuilder.Entity("API.Entities.Timeline", b =>
                {
                    b.Property<int>("TimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BidId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("TimelineId");

                    b.HasIndex("BidId");

                    b.ToTable("Timeline");
                });

            modelBuilder.Entity("API.Entities.Vacancy", b =>
                {
                    b.Property<int>("VacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<int>("SmeId")
                        .HasColumnType("integer");

                    b.Property<string>("VacTitle")
                        .HasColumnType("text");

                    b.HasKey("VacId");

                    b.HasIndex("SmeId");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("API.Entities.Admin", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithOne("Admin")
                        .HasForeignKey("API.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Application", b =>
                {
                    b.HasOne("API.Entities.Student", "Student")
                        .WithMany("Vacancy")
                        .HasForeignKey("StudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Vacancy", "Vacancy")
                        .WithMany("Students")
                        .HasForeignKey("VacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("API.Entities.Bid", b =>
                {
                    b.HasOne("API.Entities.Job", "Job")
                        .WithMany("Bid")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Professional", "Professional")
                        .WithMany("Bid")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Sme", "Sme")
                        .WithMany("Bid")
                        .HasForeignKey("SmeId");

                    b.Navigation("Job");

                    b.Navigation("Professional");

                    b.Navigation("Sme");
                });

            modelBuilder.Entity("API.Entities.Experience", b =>
                {
                    b.HasOne("API.Entities.Professional", "Professional")
                        .WithMany("Experience")
                        .HasForeignKey("ProfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("API.Entities.Job", b =>
                {
                    b.HasOne("API.Entities.Field", "Field")
                        .WithMany("Job")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Sme", "Sme")
                        .WithMany("Job")
                        .HasForeignKey("SmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Sme");
                });

            modelBuilder.Entity("API.Entities.Meeting", b =>
                {
                    b.HasOne("API.Entities.Bid", "Bid")
                        .WithMany("Meeting")
                        .HasForeignKey("BidId");

                    b.HasOne("API.Entities.Professional", "Professional")
                        .WithMany("Meeting")
                        .HasForeignKey("ProfId");

                    b.HasOne("API.Entities.Sme", "Sme")
                        .WithMany("Meeting")
                        .HasForeignKey("SmeId");

                    b.HasOne("API.Entities.Student", "Student")
                        .WithMany("Meeting")
                        .HasForeignKey("StudId");

                    b.HasOne("API.Entities.Vacancy", "Vacancy")
                        .WithMany("Meeting")
                        .HasForeignKey("VacId");

                    b.Navigation("Bid");

                    b.Navigation("Professional");

                    b.Navigation("Sme");

                    b.Navigation("Student");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("API.Entities.Organization", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithOne("Organization")
                        .HasForeignKey("API.Entities.Organization", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Professional", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithOne("Professional")
                        .HasForeignKey("API.Entities.Professional", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Field", "Field")
                        .WithMany("Professional")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Qualification", b =>
                {
                    b.HasOne("API.Entities.Professional", "Professional")
                        .WithMany("Qualification")
                        .HasForeignKey("ProfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("API.Entities.Skills", b =>
                {
                    b.HasOne("API.Entities.Professional", "Professional")
                        .WithMany("SubField")
                        .HasForeignKey("ProfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.SubField", "SubField")
                        .WithMany("Professional")
                        .HasForeignKey("SubFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("SubField");
                });

            modelBuilder.Entity("API.Entities.Sme", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithOne("Sme")
                        .HasForeignKey("API.Entities.Sme", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Student", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithOne("Student")
                        .HasForeignKey("API.Entities.Student", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Field", "Field")
                        .WithMany("Student")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.SubField", b =>
                {
                    b.HasOne("API.Entities.Field", "Field")
                        .WithMany("SubField")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("API.Entities.Timeline", b =>
                {
                    b.HasOne("API.Entities.Bid", "Bid")
                        .WithMany("Timeline")
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("API.Entities.Vacancy", b =>
                {
                    b.HasOne("API.Entities.Sme", "Sme")
                        .WithMany("Vacancy")
                        .HasForeignKey("SmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sme");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Organization");

                    b.Navigation("Professional");

                    b.Navigation("Sme");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("API.Entities.Bid", b =>
                {
                    b.Navigation("Meeting");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("API.Entities.Field", b =>
                {
                    b.Navigation("Job");

                    b.Navigation("Professional");

                    b.Navigation("Student");

                    b.Navigation("SubField");
                });

            modelBuilder.Entity("API.Entities.Job", b =>
                {
                    b.Navigation("Bid");
                });

            modelBuilder.Entity("API.Entities.Professional", b =>
                {
                    b.Navigation("Bid");

                    b.Navigation("Experience");

                    b.Navigation("Meeting");

                    b.Navigation("Qualification");

                    b.Navigation("SubField");
                });

            modelBuilder.Entity("API.Entities.Sme", b =>
                {
                    b.Navigation("Bid");

                    b.Navigation("Job");

                    b.Navigation("Meeting");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("API.Entities.Student", b =>
                {
                    b.Navigation("Meeting");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("API.Entities.SubField", b =>
                {
                    b.Navigation("Professional");
                });

            modelBuilder.Entity("API.Entities.Vacancy", b =>
                {
                    b.Navigation("Meeting");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
